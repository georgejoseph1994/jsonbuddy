{"remainingRequest":"A:\\Z Drive\\OnlineJSONeditor\\OnlineJSONeditor\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!A:\\Z Drive\\OnlineJSONeditor\\OnlineJSONeditor\\node_modules\\jsoneditor\\src\\js\\autocomplete.js","dependencies":[{"path":"A:\\Z Drive\\OnlineJSONeditor\\OnlineJSONeditor\\node_modules\\jsoneditor\\src\\js\\autocomplete.js","mtime":499162500000},{"path":"A:\\Z Drive\\OnlineJSONeditor\\OnlineJSONeditor\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1531646483117},{"path":"A:\\Z Drive\\OnlineJSONeditor\\OnlineJSONeditor\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["'use strict';\n\nfunction completely(config) {\n    config = config || {};\n    config.confirmKeys = config.confirmKeys || [39, 35, 9] // right, end, tab \n    config.caseSensitive = config.caseSensitive || false    // autocomplete case sensitive\n\n    var fontSize = '';\n    var fontFamily = '';    \n\n    var wrapper = document.createElement('div');\n    wrapper.style.position = 'relative';\n    wrapper.style.outline = '0';\n    wrapper.style.border = '0';\n    wrapper.style.margin = '0';\n    wrapper.style.padding = '0';\n\n    var dropDown = document.createElement('div');\n    dropDown.className = 'autocomplete dropdown';\n    dropDown.style.position = 'absolute';\n    dropDown.style.visibility = 'hidden';\n\n    var spacer;\n    var leftSide; // <-- it will contain the leftSide part of the textfield (the bit that was already autocompleted)\n    var createDropDownController = function (elem, rs) {\n        var rows = [];\n        var ix = 0;\n        var oldIndex = -1;\n\n        var onMouseOver = function () { this.style.outline = '1px solid #ddd'; }\n        var onMouseOut = function () { this.style.outline = '0'; }\n        var onMouseDown = function () { p.hide(); p.onmouseselection(this.__hint, p.rs); }\n\n        var p = {\n            rs: rs,\n            hide: function () {\n                elem.style.visibility = 'hidden';\n                //rs.hideDropDown();\n            },\n            refresh: function (token, array) {\n                elem.style.visibility = 'hidden';\n                ix = 0;\n                elem.innerHTML = '';\n                var vph = (window.innerHeight || document.documentElement.clientHeight);\n                var rect = elem.parentNode.getBoundingClientRect();\n                var distanceToTop = rect.top - 6;                        // heuristic give 6px \n                var distanceToBottom = vph - rect.bottom - 6;  // distance from the browser border.\n\n                rows = [];\n                for (var i = 0; i < array.length; i++) {\n\n                    if (  (config.caseSensitive && array[i].indexOf(token) !== 0)\n                        ||(!config.caseSensitive && array[i].toLowerCase().indexOf(token.toLowerCase()) !== 0)) { continue; }\n\n                    var divRow = document.createElement('div');\n                    divRow.className = 'item';\n                    //divRow.style.color = config.color;\n                    divRow.onmouseover = onMouseOver;\n                    divRow.onmouseout = onMouseOut;\n                    divRow.onmousedown = onMouseDown;\n                    divRow.__hint = array[i];\n                    divRow.innerHTML = array[i].substring(0, token.length) + '<b>' + array[i].substring(token.length) + '</b>';\n                    rows.push(divRow);\n                    elem.appendChild(divRow);\n                }\n                if (rows.length === 0) {\n                    return; // nothing to show.\n                }\n                if (rows.length === 1 && (   (token.toLowerCase() === rows[0].__hint.toLowerCase() && !config.caseSensitive) \n                                           ||(token === rows[0].__hint && config.caseSensitive))){\n                    return; // do not show the dropDown if it has only one element which matches what we have just displayed.\n                }\n\n                if (rows.length < 2) return;\n                p.highlight(0);\n\n                if (distanceToTop > distanceToBottom * 3) {        // Heuristic (only when the distance to the to top is 4 times more than distance to the bottom\n                    elem.style.maxHeight = distanceToTop + 'px';  // we display the dropDown on the top of the input text\n                    elem.style.top = '';\n                    elem.style.bottom = '100%';\n                } else {\n                    elem.style.top = '100%';\n                    elem.style.bottom = '';\n                    elem.style.maxHeight = distanceToBottom + 'px';\n                }\n                elem.style.visibility = 'visible';\n            },\n            highlight: function (index) {\n                if (oldIndex != -1 && rows[oldIndex]) {\n                    rows[oldIndex].className = \"item\";\n                }\n                rows[index].className = \"item hover\"; \n                oldIndex = index;\n            },\n            move: function (step) { // moves the selection either up or down (unless it's not possible) step is either +1 or -1.\n                if (elem.style.visibility === 'hidden') return ''; // nothing to move if there is no dropDown. (this happens if the user hits escape and then down or up)\n                if (ix + step === -1 || ix + step === rows.length) return rows[ix].__hint; // NO CIRCULAR SCROLLING. \n                ix += step;\n                p.highlight(ix);\n                return rows[ix].__hint;//txtShadow.value = uRows[uIndex].__hint ;\n            },\n            onmouseselection: function () { } // it will be overwritten. \n        };\n        return p;\n    }\n\n    function setEndOfContenteditable(contentEditableElement) {\n        var range, selection;\n        if (document.createRange)//Firefox, Chrome, Opera, Safari, IE 9+\n        {\n            range = document.createRange();//Create a range (a range is a like the selection but invisible)\n            range.selectNodeContents(contentEditableElement);//Select the entire contents of the element with the range\n            range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start\n            selection = window.getSelection();//get the selection object (allows you to change selection)\n            selection.removeAllRanges();//remove any selections already made\n            selection.addRange(range);//make the range you have just created the visible selection\n        }\n        else if (document.selection)//IE 8 and lower\n        {\n            range = document.body.createTextRange();//Create a range (a range is a like the selection but invisible)\n            range.moveToElementText(contentEditableElement);//Select the entire contents of the element with the range\n            range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start\n            range.select();//Select the range (make it the visible selection\n        }\n    }\n\n    function calculateWidthForText(text) {\n        if (spacer === undefined) { // on first call only.\n            spacer = document.createElement('span');\n            spacer.style.visibility = 'hidden';\n            spacer.style.position = 'fixed';\n            spacer.style.outline = '0';\n            spacer.style.margin = '0';\n            spacer.style.padding = '0';\n            spacer.style.border = '0';\n            spacer.style.left = '0';\n            spacer.style.whiteSpace = 'pre';\n            spacer.style.fontSize = fontSize;\n            spacer.style.fontFamily = fontFamily;\n            spacer.style.fontWeight = 'normal';\n            document.body.appendChild(spacer);\n        }\n\n        // Used to encode an HTML string into a plain text.\n        // taken from http://stackoverflow.com/questions/1219860/javascript-jquery-html-encoding\n        spacer.innerHTML = String(text).replace(/&/g, '&amp;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&#39;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;');\n        return spacer.getBoundingClientRect().right;\n    }\n\n    var rs = {\n        onArrowDown: function () { }, // defaults to no action.\n        onArrowUp: function () { },   // defaults to no action.\n        onEnter: function () { },     // defaults to no action.\n        onTab: function () { },       // defaults to no action.\n        startFrom: 0,\n        options: [],\n        element: null,\n        elementHint: null,\n        elementStyle: null,\n        wrapper: wrapper,      // Only to allow  easy access to the HTML elements to the final user (possibly for minor customizations)\n        show: function (element, startPos, options) {\n            this.startFrom = startPos;\n            this.wrapper.remove();\n            if (this.elementHint) {\n                this.elementHint.remove();\n                this.elementHint = null;\n            }\n            \n            if (fontSize == '') {\n                fontSize = window.getComputedStyle(element).getPropertyValue('font-size');\n            }\n            if (fontFamily == '') {\n                fontFamily = window.getComputedStyle(element).getPropertyValue('font-family');\n            }\n            \n            var w = element.getBoundingClientRect().right - element.getBoundingClientRect().left;\n            dropDown.style.marginLeft = '0';\n            dropDown.style.marginTop = element.getBoundingClientRect().height + 'px';\n            this.options = options;\n\n            if (this.element != element) {\n                this.element = element;\n                this.elementStyle = {\n                    zIndex: this.element.style.zIndex,\n                    position: this.element.style.position,\n                    backgroundColor: this.element.style.backgroundColor,\n                    borderColor: this.element.style.borderColor\n                }\n            }\n\n            this.element.style.zIndex = 3;\n            this.element.style.position = 'relative';\n            this.element.style.backgroundColor = 'transparent';\n            this.element.style.borderColor = 'transparent';\n\n            this.elementHint = element.cloneNode();\n            this.elementHint.className = 'autocomplete hint';\n            this.elementHint.style.zIndex = 2;\n            this.elementHint.style.position = 'absolute';\n            this.elementHint.onfocus = function () { this.element.focus(); }.bind(this);\n\n\n\n            if (this.element.addEventListener) {\n                this.element.removeEventListener(\"keydown\", keyDownHandler);\n                this.element.addEventListener(\"keydown\", keyDownHandler, false);\n                this.element.removeEventListener(\"blur\", onBlurHandler);\n                this.element.addEventListener(\"blur\", onBlurHandler, false);                \n            } \n\n            wrapper.appendChild(this.elementHint);\n            wrapper.appendChild(dropDown);\n            element.parentElement.appendChild(wrapper);\n\n\n            this.repaint(element);\n        },\n        setText: function (text) {\n            this.element.innerText = text;\n        },\n        getText: function () {\n            return this.element.innerText;\n        },\n        hideDropDown: function () {\n            this.wrapper.remove();\n            if (this.elementHint) {\n                this.elementHint.remove();\n                this.elementHint = null;\n                dropDownController.hide();\n                this.element.style.zIndex = this.elementStyle.zIndex;\n                this.element.style.position = this.elementStyle.position;\n                this.element.style.backgroundColor = this.elementStyle.backgroundColor;\n                this.element.style.borderColor = this.elementStyle.borderColor;\n            }\n            \n        },\n        repaint: function (element) {\n            var text = element.innerText;\n            text = text.replace('\\n', '');\n\n            var startFrom = this.startFrom;\n            var options = this.options;\n            var optionsLength = this.options.length;\n\n            // breaking text in leftSide and token.\n            \n            var token = text.substring(this.startFrom);\n            leftSide = text.substring(0, this.startFrom);\n            \n            for (var i = 0; i < optionsLength; i++) {\n                var opt = this.options[i];\n                if (   (!config.caseSensitive && opt.toLowerCase().indexOf(token.toLowerCase()) === 0)\n                    || (config.caseSensitive && opt.indexOf(token) === 0)) {   // <-- how about upperCase vs. lowercase\n                    this.elementHint.innerText = leftSide + token + opt.substring(token.length);\n                    this.elementHint.realInnerText = leftSide + opt;\n                    break;\n                }\n            }\n            // moving the dropDown and refreshing it.\n            dropDown.style.left = calculateWidthForText(leftSide) + 'px';\n            dropDownController.refresh(token, this.options);\n            this.elementHint.style.width = calculateWidthForText(this.elementHint.innerText) + 10 + 'px'\n            var wasDropDownHidden = (dropDown.style.visibility == 'hidden');\n            if (!wasDropDownHidden)\n                this.elementHint.style.width = calculateWidthForText(this.elementHint.innerText) + dropDown.clientWidth + 'px';\n        }\n    };\n\n    var dropDownController = createDropDownController(dropDown, rs);\n\n    var keyDownHandler = function (e) {\n        //console.log(\"Keydown:\" + e.keyCode);\n        e = e || window.event;\n        var keyCode = e.keyCode;\n\n        if (this.elementHint == null) return;\n\n        if (keyCode == 33) { return; } // page up (do nothing)\n        if (keyCode == 34) { return; } // page down (do nothing);\n\n        if (keyCode == 27) { //escape\n            rs.hideDropDown();\n            rs.element.focus();\n            e.preventDefault();\n            e.stopPropagation();\n            return;\n        }\n\n        var text = this.element.innerText;\n        text = text.replace('\\n', '');\n        var startFrom = this.startFrom;\n\n        if (config.confirmKeys.indexOf(keyCode) >= 0) { //  (autocomplete triggered)\n            if (keyCode == 9) {                 \n                if (this.elementHint.innerText.length == 0) {\n                    rs.onTab(); \n                }\n            }\n            if (this.elementHint.innerText.length > 0) { // if there is a hint               \n                if (this.element.innerText != this.elementHint.realInnerText) {\n                    this.element.innerText = this.elementHint.realInnerText;\n                    rs.hideDropDown();\n                    setEndOfContenteditable(this.element);\n                    if (keyCode == 9) {                \n                        rs.element.focus();\n                        e.preventDefault();\n                        e.stopPropagation();\n                    }\n                }                \n            }\n            return;\n        }\n\n        if (keyCode == 13) {       // enter  (autocomplete triggered)\n            if (this.elementHint.innerText.length == 0) { // if there is a hint\n                rs.onEnter();\n            } else {\n                var wasDropDownHidden = (dropDown.style.visibility == 'hidden');\n                dropDownController.hide();\n\n                if (wasDropDownHidden) {\n                    rs.hideDropDown();\n                    rs.element.focus();\n                    rs.onEnter();\n                    return;\n                }\n\n                this.element.innerText = this.elementHint.realInnerText;\n                rs.hideDropDown();\n                setEndOfContenteditable(this.element);\n                e.preventDefault();\n                e.stopPropagation();\n            }\n            return;\n        }\n\n        if (keyCode == 40) {     // down\n            var token = text.substring(this.startFrom);\n            var m = dropDownController.move(+1);\n            if (m == '') { rs.onArrowDown(); }\n            this.elementHint.innerText = leftSide + token + m.substring(token.length);\n            this.elementHint.realInnerText = leftSide + m;\n            e.preventDefault();\n            e.stopPropagation();\n            return;\n        }\n\n        if (keyCode == 38) {    // up\n            var token = text.substring(this.startFrom);\n            var m = dropDownController.move(-1);\n            if (m == '') { rs.onArrowUp(); }\n            this.elementHint.innerText = leftSide + token + m.substring(token.length);\n            this.elementHint.realInnerText = leftSide + m;\n            e.preventDefault();\n            e.stopPropagation();\n            return;\n        }\n\n    }.bind(rs);\n\n    var onBlurHandler = function (e) {\n        rs.hideDropDown();\n        //console.log(\"Lost focus.\");\n    }.bind(rs);\n\n    dropDownController.onmouseselection = function (text, rs) {\n        rs.element.innerText = rs.elementHint.innerText = leftSide + text;        \n        rs.hideDropDown();   \n        window.setTimeout(function () {\n            rs.element.focus();\n            setEndOfContenteditable(rs.element);  \n        }, 1);              \n    };\n\n    return rs;\n}\n\nmodule.exports = completely;",null]}